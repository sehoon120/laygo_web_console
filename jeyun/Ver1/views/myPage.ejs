<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>mypage</title>
    <style type="text/css" media="screen">
		body { background:#eee; margin:1em; text-align:center; }
		canvas { display:block; margin:1em auto; background:#fff; border:1px solid #ccc }
	</style>
</head>

<body>
    <% if(typeof drawObjectDoc == 'undefined') {%>
        <script> alert("No json")</script>
    <%} %>
    
    <canvas id="canvas" width="1920" height="1080"></canvas>
    <script type="text/javascript">
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');

        function trackTransforms(ctx){
            var svg = document.createElementNS("http://www.w3.org/2000/svg",'svg');
            var xform = svg.createSVGMatrix();
            ctx.getTransform = function(){ return xform; };
            
            var savedTransforms = [];
            var save = ctx.save;
            ctx.save = function(){
                savedTransforms.push(xform.translate(0,0));
                return save.call(ctx);
            };
            var restore = ctx.restore;
            ctx.restore = function(){
                xform = savedTransforms.pop();
                return restore.call(ctx);
            };

            var scale = ctx.scale;
            ctx.scale = function(sx,sy){
                xform = xform.scaleNonUniform(sx,sy);
                return scale.call(ctx,sx,sy);
            };
            var rotate = ctx.rotate;
            ctx.rotate = function(radians){
                xform = xform.rotate(radians*180/Math.PI);
                return rotate.call(ctx,radians);
            };
            var translate = ctx.translate;
            ctx.translate = function(dx,dy){
                xform = xform.translate(dx,dy);
                return translate.call(ctx,dx,dy);
            };
            var transform = ctx.transform;
            ctx.transform = function(a,b,c,d,e,f){
                var m2 = svg.createSVGMatrix();
                m2.a=a; m2.b=b; m2.c=c; m2.d=d; m2.e=e; m2.f=f;
                xform = xform.multiply(m2);
                return transform.call(ctx,a,b,c,d,e,f);
            };
            var setTransform = ctx.setTransform;
            ctx.setTransform = function(a,b,c,d,e,f){
                xform.a = a;
                xform.b = b;
                xform.c = c;
                xform.d = d;
                xform.e = e;
                xform.f = f;
                return setTransform.call(ctx,a,b,c,d,e,f);
            };
            var pt  = svg.createSVGPoint();
            ctx.transformedPoint = function(x,y){
                pt.x=x; pt.y=y;
                return pt.matrixTransform(xform.inverse());
            }
	    }

        trackTransforms(ctx);
        var originX = 0;
        var originY = 0;
        var width = 0;
        var height = 0;
        ctx.translate(960, 540);
        ctx.beginPath();
        var rectList = [];
    </script>

    
    <% function buildMap(docs) {
        parent_obj = docs['logic_generated']['dff_2x']
        for(child_obj_key in parent_obj){
            if(child_obj_key == 'masks'){
                masks = parent_obj[child_obj_key];
                for(mask_layer_name in masks){
                    mask_layer = masks[mask_layer_name];
                    mask_layer.forEach( mask => { %>
                        <script>
                            originX = "<%= mask[0][0] %>"*5;
                            originY = "<%= mask[0][1] %>"*5;
                            width = "<%= mask[1][0]-mask[0][0]%>"*5;
                            height = "<%= mask[1][1]-mask[0][1] %>"*5;
                            //x_bl, y_bl, x_diff, y_diff, color, layer name, rectangle on/off, mask/pin/subblock
                            rectList.push([originX, originY, width, height, "rgba(255 ,0, 0, 0.5)", "<%=mask_layer_name %>", true, 'mask']);
                        </script>
                    <% });
                }
            }
            else if(child_obj_key == 'pins'){
                pins = parent_obj[child_obj_key];
                for(pin_name in pins){
                    pin = pins[pin_name]; %>
                    <script>
                        originX = "<%= pin['xy'][0][0] %>"*5;
                        originY = "<%= pin['xy'][0][1] %>"*5;
                        width = "<%= pin['xy'][1][0]-pin['xy'][0][0]%>"*5;
                        height = "<%= pin['xy'][1][1]-pin['xy'][0][1] %>"*5;
                        //x_bl, y_bl, x_diff, y_diff, color, layer name, rectangle on/off, mask/pin/subblock
                        rectList.push([originX, originY, width, height, "rgba(0,255,0, 0.5)", "<%=pin_name %>", true, 'pin']);
                    </script>
                <% }
            }
            else if(child_obj_key == 'subblocks'){
                subblocks = parent_obj[child_obj_key];
                for(subblock_name in subblocks){
                    subblock = subblocks[subblock_name];
                    subblock_called = docs['logic_generated'][subblock['cellname']] %>
                    <script>
                        originX = "<%= subblock['xy'][0] %>"*5;
                        originY = "<%= subblock['xy'][1] %>"*5;
                        width = "<%= subblock_called['bbox'][1][0]%>"*5;
                        height = "<%= subblock_called['bbox'][1][1]%> %>"*5;
                        //x_bl, y_bl, x_diff, y_diff, color, layer name, rectangle on/off, mask/pin/subblock
                        rectList.push([originX, originY, width, height, "rgba(0, 0, 0, 1.0)", "<%=subblock_name %>", true, 'subblock']);
                    </script>
                <% }
            }
        }
    }
    buildMap(drawObjectDoc)%>
    <script>
        function redraw(){
            ctx.save();
			ctx.setTransform(1,0,0,1,0,0);
			ctx.clearRect(0,0,canvas.width,canvas.height);
			ctx.restore();
            rectList.forEach(rect => {
                if(rect[6]){
                    if(rect[7] == 'subblock'){
                        ctx.lineWidth = 10;
                        ctx.strokeStyle = rect[4];
                        ctx.fillStyle = rect[4];
                        ctx.strokeRect(rect[0], rect[1], rect[2], rect[3]);
                        console.log(rect[5]);
                        ctx.font = `400px Verdana`;
                        ctx.fillText(rect[5], rect[0]+rect[2]/2-200, rect[1]+rect[3]/2-200);
                    }else{
                        if(rect[7] == 'pin'){
                            console.log('pin');
                            ctx.fillStyle = rect[4];
                            ctx.fillRect(rect[0], rect[1], rect[2], rect[3]);
                            ctx.fillStyle = 'rgba(255, 0, 0, 1.0)';
                            ctx.font = `400px Verdana`;
                            ctx.fillText(rect[5], rect[0]+rect[2]/2-200, rect[1]+rect[3]/2-200);
                        }else{
                            console.log('mask');
                            ctx.fillStyle = rect[4];
                            ctx.fillRect(rect[0], rect[1], rect[2], rect[3]);
                        }
                        
                    }
                    
                }
            });
        }
        redraw();
    </script>
    

    
    
    <script>
        var lastX=canvas.width/2, lastY=canvas.height/2;
        var dragStart,dragged;
        canvas.addEventListener('mousedown',function(evt){
            document.body.style.mozUserSelect = document.body.style.webkitUserSelect = document.body.style.userSelect = 'none';
            lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);
            lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);
            dragStart = ctx.transformedPoint(lastX,lastY);
            dragged = false;
        },false);
        
        canvas.addEventListener('mousemove',function(evt){
            lastX = evt.offsetX || (evt.pageX - canvas.offsetLeft);
            lastY = evt.offsetY || (evt.pageY - canvas.offsetTop);
            dragged = true;

            if (dragStart){
                var pt = ctx.transformedPoint(lastX,lastY);
                ctx.translate(pt.x-dragStart.x,pt.y-dragStart.y);
                redraw()
            }	
        },false);
        
        canvas.addEventListener('mouseup',function(evt){
            dragStart = null;
            if (!dragged) zoom(evt.shiftKey ? -1 : 1 );
        },false);

        var scaleFactor = 1.1;
		var zoom = function(clicks){
			var pt = ctx.transformedPoint(lastX,lastY);
			ctx.translate(pt.x,pt.y);
			var factor = Math.pow(scaleFactor,clicks);
			ctx.scale(factor,factor);
			ctx.translate(-pt.x,-pt.y);
			redraw()
		}

        var handleScroll = function(evt){
            var delta = evt.wheelDelta ? evt.wheelDelta/40 : evt.detail ? -evt.detail : 0;
            if (delta) zoom(delta);
            return evt.preventDefault() && false;
        };
        
        canvas.addEventListener('DOMMouseScroll',handleScroll,false);
        
        canvas.addEventListener('mousewheel',handleScroll,false); 
    </script>

    <button id="M1">M1</button>
    <button id="M2">M2</button>
    <button id="M3">M3</button>
    <button id="M4">M4</button>
    <button id="pins">pins</button>
    <script>
        const m1Button = document.getElementById("M1");
        const m2Button = document.getElementById("M2");
        const m3Button = document.getElementById("M3");
        const m4Button = document.getElementById("M4");
        const pinButton = document.getElementById("pins");

        m1Button.addEventListener('click', () => {
            rectList.forEach(rect => {
                if(rect[5] == 'Metal1'){
                    rect[6] = !rect[6];
                }
                redraw();
            });
        });
        m2Button.addEventListener('click', () => {
            rectList.forEach(rect => {
                if(rect[5] == 'Metal2'){
                    rect[6] = !rect[6];
                }
                redraw();
            });
        });
        m2Button.addEventListener('click', () => {
            rectList.forEach(rect => {
                if(rect[5] == 'Metal3'){
                    rect[6] = !rect[6];
                }
                redraw();
            });
        });
        m2Button.addEventListener('click', () => {
            rectList.forEach(rect => {
                if(rect[5] == 'Metal4'){
                    rect[6] = !rect[6];
                }
                redraw();
            });
        });
        pinButton.addEventListener('click', () => {
            rectList.forEach(rect => {
                if(rect[7] == 'pin'){
                    rect[6] = !rect[6];
                }
                redraw();
            });
        });
    </script>
    

</body>

</html>